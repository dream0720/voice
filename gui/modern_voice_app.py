#!/usr/bin/env python3
"""
Modern Voice Processing Suite GUI
===============================

A modern, flat design interface with sidebar navigation and collapsible panels.
"""

import sys
import os
import subprocess
import json
import io
import queue
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import threading
import time

from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtGui import *
import matplotlib
matplotlib.use('Qt5Agg')  # Set matplotlib backend
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from modules.preprocessing.audio_preprocessor import AudioPreprocessor
from modules.source_separation.demucs_separator import DemucsSourceSeparator
from modules.speaker_separation.speaker_separator import SpeakerSeparator
from modules.voice_matching.voice_matcher import VoiceMatcher
from modules.utils import PathManager, Logger, validate_audio_file, get_supported_audio_formats


class ConsoleRedirector(io.StringIO):
    """Console output redirector for capturing print statements"""
    
    def __init__(self, text_widget, original_stream=None):
        super().__init__()
        self.text_widget = text_widget
        self.buffer = queue.Queue()
        self.original_stream = original_stream
        
    def write(self, text):
        if text.strip():  # Only add non-empty text
            self.buffer.put(text)
            # Also write to original stream (console)
            if self.original_stream:
                self.original_stream.write(text)
                self.original_stream.flush()
        return len(text)
    
    def flush(self):
        if self.original_stream:
            self.original_stream.flush()


class ModernCard(QFrame):
    """Modern card widget with flat design"""
    
    def __init__(self, title: str, icon: str = "üéµ", parent=None):
        super().__init__(parent)
        self.title = title
        self.icon = icon
        self.setup_ui()
        
    def setup_ui(self):
        self.setFrameStyle(QFrame.Shape.NoFrame)
        self.setStyleSheet("""
            ModernCard {
                background-color: #ffffff;
                border-radius: 16px;
                border: 1px solid #f0f0f0;
            }
            ModernCard:hover {
                border: 1px solid #e0e7ff;
            }
        """)
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(24, 24, 24, 24)
        layout.setSpacing(16)
        
        # Header
        header_layout = QHBoxLayout()
        
        icon_label = QLabel(self.icon)
        icon_label.setStyleSheet("""
            font-size: 24px;
            color: #6366f1;
            font-weight: 500;
        """)
        
        title_label = QLabel(self.title)
        title_label.setStyleSheet("""
            font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
            font-size: 18px;
            font-weight: 600;
            color: #1f2937;
            margin-left: 8px;
        """)
        
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # Content area
        self.content_area = QVBoxLayout()
        self.content_area.setSpacing(12)
        layout.addLayout(self.content_area)
          # Status and buttons area
        self.status_label = QLabel("ÂáÜÂ§áÂ∞±Áª™")
        self.status_label.setStyleSheet("""
            color: #6b7280;
            font-size: 14px;
            padding: 8px 12px;
            background-color: #f9fafb;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        """)
          # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: none;
                border-radius: 8px;
                background-color: #f3f4f6;
                height: 8px;
                text-align: center;
                color: #6b7280;
                font-size: 12px;
            }
            QProgressBar::chunk {
                background-color: #6366f1;
                border-radius: 8px;
            }
        """)
        
        self.content_area.addWidget(self.status_label)
        self.content_area.addWidget(self.progress_bar)
          # Button area
        self.button_layout = QHBoxLayout()
        self.button_layout.setSpacing(12)
        self.content_area.addLayout(self.button_layout)
        
        # Results button area (initially hidden)
        self.results_layout = QHBoxLayout()
        self.results_layout.setSpacing(8)
        
        # View results button
        self.view_results_btn = QPushButton("üìä Êü•ÁúãÁªìÊûú")
        self.view_results_btn.setStyleSheet("""
            QPushButton {
                background-color: #10b981;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 8px;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                font-size: 12px;
                font-weight: 500;
            }
            QPushButton:hover {
                background-color: #059669;
            }
            QPushButton:pressed {
                background-color: #047857;
            }
            QPushButton:disabled {
                background-color: #e5e7eb;
                color: #9ca3af;
            }
        """)
        self.view_results_btn.setVisible(False)
        self.view_results_btn.setEnabled(False)
        
        # Open folder button
        self.open_folder_btn = QPushButton("üìÅ ÊâìÂºÄÊñá‰ª∂Â§π")
        self.open_folder_btn.setStyleSheet("""
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 8px;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                font-size: 12px;
                font-weight: 500;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
            QPushButton:pressed {
                background-color: #1d4ed8;
            }
            QPushButton:disabled {
                background-color: #e5e7eb;
                color: #9ca3af;
            }
        """)
        self.open_folder_btn.setVisible(False)
        self.open_folder_btn.setEnabled(False)
        
        self.results_layout.addWidget(self.view_results_btn)
        self.results_layout.addWidget(self.open_folder_btn)
        self.results_layout.addStretch()
        
        self.content_area.addLayout(self.results_layout)
        
        # Store processing results
        self.processing_results = None
        self.output_dir = None
        
    def add_button(self, text: str, callback, primary: bool = False):
        """Add a modern button to the card"""
        button = QPushButton(text)
        
        if primary:
            button.setStyleSheet("""
                QPushButton {
                    background-color: #6366f1;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 12px;
                    font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                    font-size: 14px;
                    font-weight: 500;
                }
                QPushButton:hover {
                    background-color: #5b5bf6;
                }
                QPushButton:pressed {
                    background-color: #4f46e5;
                }
                QPushButton:disabled {
                    background-color: #e5e7eb;
                    color: #9ca3af;
                }
            """)
        else:
            button.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    color: #6b7280;
                    border: 1px solid #d1d5db;
                    padding: 12px 24px;
                    border-radius: 12px;
                    font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                    font-size: 14px;
                    font-weight: 500;
                }
                QPushButton:hover {
                    background-color: #f9fafb;
                    border-color: #9ca3af;
                }
                QPushButton:pressed {
                    background-color: #f3f4f6;
                }
            """)
        
        button.clicked.connect(callback)
        self.button_layout.addWidget(button)
        return button


class SidebarButton(QPushButton):
    """Modern sidebar navigation button"""
    
    def __init__(self, text: str, icon: str, parent=None):
        super().__init__(parent)
        self.setText(f"{icon}  {text}")
        self.setCheckable(True)
        self.setStyleSheet("""
            SidebarButton {
                text-align: left;
                padding: 16px 20px;
                border: none;
                border-radius: 12px;
                background-color: transparent;
                color: #6b7280;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                font-size: 15px;
                font-weight: 500;
                margin: 2px 0;
            }
            SidebarButton:hover {
                background-color: #f8fafc;
                color: #374151;
            }
            SidebarButton:checked {
                background-color: #eef2ff;
                color: #6366f1;
                font-weight: 600;
            }
        """)


class CollapsiblePanel(QFrame):
    """Collapsible panel widget"""
    
    def __init__(self, title: str, parent=None):
        super().__init__(parent)
        self.title = title
        self.is_collapsed = False
        self.setup_ui()
        
    def setup_ui(self):
        self.setFrameStyle(QFrame.Shape.NoFrame)
        self.setStyleSheet("""
            CollapsiblePanel {
                background-color: #ffffff;
                border-radius: 12px;
                border: 1px solid #e5e7eb;
            }
        """)
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Header
        self.header = QPushButton(f"‚ñº {self.title}")
        self.header.setStyleSheet("""
            QPushButton {
                text-align: left;
                padding: 16px 20px;
                border: none;
                border-radius: 12px 12px 0 0;
                background-color: #f8fafc;
                color: #374151;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                font-size: 14px;
                font-weight: 600;
                border-bottom: 1px solid #e5e7eb;
            }
            QPushButton:hover {
                background-color: #f1f5f9;
            }
        """)
        self.header.clicked.connect(self.toggle_collapse)
        layout.addWidget(self.header)
        
        # Content
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout(self.content_widget)
        self.content_layout.setContentsMargins(20, 20, 20, 20)
        layout.addWidget(self.content_widget)
        
    def toggle_collapse(self):
        """Toggle panel collapse state"""
        self.is_collapsed = not self.is_collapsed
        self.content_widget.setVisible(not self.is_collapsed)
        
        arrow = "‚ñ∂" if self.is_collapsed else "‚ñº"
        self.header.setText(f"{arrow} {self.title}")


class ModernConsole(QTextEdit):
    """Modern console widget"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        self.setStyleSheet("""
            QTextEdit {
                background-color: #1f2937;
                color: #f9fafb;
                border: none;
                border-radius: 12px;
                font-family: 'SF Mono', 'Consolas', 'Monaco', monospace;
                font-size: 13px;
                line-height: 1.4;
                padding: 16px;
            }
            QTextEdit QScrollBar:vertical {
                background-color: #374151;
                width: 8px;
                border-radius: 4px;
            }
            QTextEdit QScrollBar::handle:vertical {
                background-color: #6b7280;
                border-radius: 4px;
                min-height: 20px;
            }
            QTextEdit QScrollBar::handle:vertical:hover {
                background-color: #9ca3af;
            }
        """)
        self.setReadOnly(True)
        
    def append_message(self, message: str, level: str = "info"):
        """Append a styled message to console"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        colors = {
            "info": "#60a5fa",
            "success": "#34d399", 
            "warning": "#fbbf24",
            "error": "#f87171"
        }
        
        color = colors.get(level, "#f9fafb")
        
        self.append(f'<span style="color: {color};">[{timestamp}] {message}</span>')
        self.verticalScrollBar().setValue(self.verticalScrollBar().maximum())


class ProcessingThread(QThread):
    """Background processing thread"""
    progress_update = pyqtSignal(int)
    process_complete = pyqtSignal(dict, str)  # result, output_dir
    process_error = pyqtSignal(str)
    
    def __init__(self, process_type, input_file, processors, **kwargs):
        super().__init__()
        self.process_type = process_type
        self.input_file = input_file
        self.processors = processors
        self.kwargs = kwargs
    
    def run(self):
        """Run the processing in background thread"""
        try:
            if self.process_type == 'preprocessing':
                self._process_preprocessing()
            elif self.process_type == 'source_separation':
                self._process_source_separation()
            elif self.process_type == 'speaker_separation':
                self._process_speaker_separation()
            elif self.process_type == 'voice_matching':
                self._process_voice_matching()
            else:
                self.process_error.emit(f"Êú™Áü•ÁöÑÂ§ÑÁêÜÁ±ªÂûã: {self.process_type}")
                
        except Exception as e:
            self.process_error.emit(str(e))
    
    def _process_preprocessing(self):
        """Process audio preprocessing"""
        try:
            processor = self.processors.get('preprocessor')
            if not processor:
                self.process_error.emit("È¢ÑÂ§ÑÁêÜÂô®Êú™ÂàùÂßãÂåñ")
                return
            self.progress_update.emit(10)
            
            # Get output directory
            output_dir = os.path.join("output", "preprocessing")
            os.makedirs(output_dir, exist_ok=True)
            
            # Call the actual preprocessing
            result = processor.process_audio(self.input_file, output_dir)
            
            self.progress_update.emit(100)
            
            self.process_complete.emit(result, output_dir)
            
        except Exception as e:
            self.process_error.emit(f"È¢ÑÂ§ÑÁêÜÂ§±Ë¥•: {str(e)}")
    
    def _process_source_separation(self):
        """Process source separation"""
        try:
            processor = self.processors.get('source_separator')
            if not processor:
                self.process_error.emit("Èü≥Ê∫êÂàÜÁ¶ªÂô®Êú™ÂàùÂßãÂåñ")
                return
            self.progress_update.emit(10)
            
            # Get output directory
            output_dir = os.path.join("output", "source_separation")
            os.makedirs(output_dir, exist_ok=True)
            
            # Call the actual source separation
            result = processor.separate_audio(self.input_file, output_dir)
            
            self.progress_update.emit(100)
            
            self.process_complete.emit(result, output_dir)
            
        except Exception as e:
            self.process_error.emit(f"Èü≥Ê∫êÂàÜÁ¶ªÂ§±Ë¥•: {str(e)}")
    
    def _process_speaker_separation(self):
        """Process speaker separation"""
        try:
            processor = self.processors.get('speaker_separator')
            if not processor:
                self.process_error.emit("ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂô®Êú™ÂàùÂßãÂåñ")
                return
            self.progress_update.emit(10)
            
            # Get output directory
            output_dir = os.path.join("output", "speaker_separation")
            os.makedirs(output_dir, exist_ok=True)
            
            # Call the actual speaker separation
            result = processor.separate_speakers(self.input_file, output_dir)
            
            self.progress_update.emit(100)
            
            self.process_complete.emit(result, output_dir)
            
        except Exception as e:
            self.process_error.emit(f"ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂ§±Ë¥•: {str(e)}")
    
    def _process_voice_matching(self):
        """Process voice matching"""
        try:
            processor = self.processors.get('voice_matcher')
            if not processor:
                self.process_error.emit("‰∫∫Â£∞ÂåπÈÖçÂô®Êú™ÂàùÂßãÂåñ")
                return
            
            self.progress_update.emit(10)
            
            # Get reference and candidate files from kwargs
            reference_file = self.kwargs.get('reference_file')
            candidate_files = self.kwargs.get('candidate_files', [])
            if not reference_file or not candidate_files:
                self.process_error.emit("ÂèÇËÄÉÈü≥È¢ëÊàñÂÄôÈÄâÈü≥È¢ëÊñá‰ª∂Áº∫Â§±")
                return
            
            # Get output directory
            output_dir = os.path.join("output", "voice_matching")
            os.makedirs(output_dir, exist_ok=True)
            
            # Call the actual voice matching
            result = processor.match_voices(reference_file, candidate_files, output_dir)
            
            self.progress_update.emit(100)
            
            self.process_complete.emit(result, output_dir)
            
        except Exception as e:
            self.process_error.emit(f"‰∫∫Â£∞ÂåπÈÖçÂ§±Ë¥•: {str(e)}")


class ModernVoiceProcessingApp(QMainWindow):
    """Modern Voice Processing Suite Application"""
    def __init__(self):
        super().__init__()
        self.current_module = None
        self.processors = {}
        
        # Setup console redirection before anything else
        self.setup_console_redirection()
        
        self.setup_processors()
        self.setup_ui()
        self.setup_connections()
          # Setup timer for console updates
        self.console_timer = QTimer()
        self.console_timer.timeout.connect(self.update_console)
        self.console_timer.start(100)  # Update every 100ms
        
    def setup_console_redirection(self):
        """Setup console output redirection"""
        # Keep references to original streams
        self.original_stdout = sys.stdout
        self.original_stderr = sys.stderr
        
        # Create redirectors that write to both GUI and console
        self.stdout_redirector = ConsoleRedirector(None, self.original_stdout)
        self.stderr_redirector = ConsoleRedirector(None, self.original_stderr)
        
        # Redirect stdout and stderr
        sys.stdout = self.stdout_redirector
        sys.stderr = self.stderr_redirector
    def setup_processors(self):
        """Initialize processing modules"""
        try:
            print("üîß Ê≠£Âú®ÂàùÂßãÂåñÂ§ÑÁêÜÂô®...")
            
            # Initialize AudioPreprocessor
            print("   - ÂàùÂßãÂåñÈü≥È¢ëÈ¢ÑÂ§ÑÁêÜÂô®...")
            self.processors = {}
            self.processors['preprocessor'] = AudioPreprocessor()
            print("   ‚úÖ Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜÂô®ÂàùÂßãÂåñÊàêÂäü")
            
            # Initialize DemucsSourceSeparator
            print("   - ÂàùÂßãÂåñÈü≥Ê∫êÂàÜÁ¶ªÂô®...")
            self.processors['source_separator'] = DemucsSourceSeparator()
            print("   ‚úÖ Èü≥Ê∫êÂàÜÁ¶ªÂô®ÂàùÂßãÂåñÊàêÂäü")
            
            # Initialize SpeakerSeparator
            print("   - ÂàùÂßãÂåñËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂô®...")
            self.processors['speaker_separator'] = SpeakerSeparator(hf_token="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")
            print("   ‚úÖ ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂô®ÂàùÂßãÂåñÊàêÂäü")
            
            # Initialize VoiceMatcher
            print("   - ÂàùÂßãÂåñ‰∫∫Â£∞ÂåπÈÖçÂô®...")
            self.processors['voice_matcher'] = VoiceMatcher()
            print("   ‚úÖ ‰∫∫Â£∞ÂåπÈÖçÂô®ÂàùÂßãÂåñÊàêÂäü")
            
            print("üéâ ÊâÄÊúâÂ§ÑÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå Â§ÑÁêÜÂô®ÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            import traceback
            traceback.print_exc()
            # ‰ΩøÁî®ÁÆÄÂåñÁöÑÂ§ÑÁêÜÂô®Â≠óÂÖ∏ÔºåÈÅøÂÖçÁ®ãÂ∫èÂÆåÂÖ®Â¥©Ê∫É
            self.processors = {
                'preprocessor': None,
                'source_separator': None,
                'speaker_separator': None,
                'voice_matcher': None
            }
            
    def setup_ui(self):
        """Setup modern UI"""
        self.setWindowTitle("Voice Processing Suite - Modern Interface")
        self.setGeometry(100, 100, 1400, 900)
        
        # Set app-wide font
        app_font = QFont("SF Pro Display", 10)
        if not app_font.exactMatch():
            app_font = QFont("Segoe UI", 10)
        self.setFont(app_font)
        
        # Central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout - horizontal
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Sidebar
        self.setup_sidebar()
        main_layout.addWidget(self.sidebar, 0)
        
        # Content area
        self.content_area = QWidget()
        self.content_area.setStyleSheet("""
            QWidget {
                background-color: #f8fafc;
            }
        """)
        
        content_layout = QVBoxLayout(self.content_area)
        content_layout.setContentsMargins(24, 24, 24, 24)
        content_layout.setSpacing(24)
        
        # Top content - module cards
        self.module_container = QScrollArea()
        self.module_container.setWidgetResizable(True)
        self.module_container.setFrameStyle(QFrame.Shape.NoFrame)
        self.module_container.setStyleSheet("background-color: transparent;")
        
        # Bottom panels - console and visualization
        self.setup_bottom_panels()
        
        content_layout.addWidget(self.module_container, 1)
        content_layout.addWidget(self.bottom_panels, 0)
        
        main_layout.addWidget(self.content_area, 1)
        
        # Initialize with first module
        self.show_module(0)
        
    def setup_sidebar(self):
        """Setup modern sidebar navigation"""
        self.sidebar = QFrame()
        self.sidebar.setFixedWidth(280)
        self.sidebar.setStyleSheet("""
            QFrame {
                background-color: #ffffff;
                border-right: 1px solid #e5e7eb;
            }
        """)
        
        sidebar_layout = QVBoxLayout(self.sidebar)
        sidebar_layout.setContentsMargins(20, 30, 20, 30)
        sidebar_layout.setSpacing(20)
        
        # App title
        title_label = QLabel("Voice Processing")
        title_label.setStyleSheet("""
            font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
            font-size: 24px;
            font-weight: 700;
            color: #111827;
            padding-bottom: 10px;
        """)
        sidebar_layout.addWidget(title_label)
        
        subtitle_label = QLabel("Èü≥È¢ëÂ§ÑÁêÜÂ∑•ÂÖ∑Â•ó‰ª∂")
        subtitle_label.setStyleSheet("""
            color: #6b7280;
            font-size: 14px;
            margin-bottom: 20px;
        """)
        sidebar_layout.addWidget(subtitle_label)
        
        # Navigation buttons
        self.nav_buttons = QButtonGroup()
        
        modules = [
            ("Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜ", "üéõÔ∏è"),
            ("Èü≥Ê∫êÂàÜÁ¶ª", "üéº"), 
            ("ËØ¥ËØù‰∫∫ÂàÜÁ¶ª", "üë•"),
            ("‰∫∫Â£∞ÂåπÈÖç", "üéØ")
        ]
        
        for i, (name, icon) in enumerate(modules):
            btn = SidebarButton(name, icon)
            self.nav_buttons.addButton(btn, i)
            sidebar_layout.addWidget(btn)
            
        # Set first button as checked
        self.nav_buttons.button(0).setChecked(True)
        
        sidebar_layout.addStretch()
        
        # Footer info
        info_label = QLabel("v2.0 - Modern Edition")
        info_label.setStyleSheet("""
            color: #9ca3af;
            font-size: 12px;
            text-align: center;
        """)
        sidebar_layout.addWidget(info_label)
        
    def setup_bottom_panels(self):
        """Setup collapsible console and visualization panels"""
        self.bottom_panels = QWidget()
        panels_layout = QHBoxLayout(self.bottom_panels)
        panels_layout.setContentsMargins(0, 0, 0, 0)
        panels_layout.setSpacing(24)
        
        # Console panel
        self.console_panel = CollapsiblePanel("ÊéßÂà∂Âè∞ËæìÂá∫")
        self.console = ModernConsole()
        self.console.setMaximumHeight(300)
        self.console_panel.content_layout.addWidget(self.console)
        
        # Visualization panel  
        self.viz_panel = CollapsiblePanel("Êï∞ÊçÆÂèØËßÜÂåñ")
        self.viz_container = QLabel("ÂèØËßÜÂåñÂÜÖÂÆπÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫")
        self.viz_container.setStyleSheet("""
            color: #9ca3af;
            text-align: center;
            padding: 40px;
            background-color: #f9fafb;
            border-radius: 8px;
            border: 2px dashed #d1d5db;
        """)
        self.viz_panel.content_layout.addWidget(self.viz_container)
        
        panels_layout.addWidget(self.console_panel, 1)
        panels_layout.addWidget(self.viz_panel, 1)

    def setup_connections(self):
        """Setup signal connections"""
        self.nav_buttons.buttonClicked.connect(self.on_nav_clicked)
        
        # Add welcome message
        self.console.append_message("üöÄ Voice Processing Suite Â∑≤ÂêØÂä®", "success")
        self.console.append_message("ÈÄâÊã©Â∑¶‰æßÊ®°ÂùóÂºÄÂßãÂ§ÑÁêÜ", "info")
        
    def update_console(self):
        """Update console output"""
        # Get new output from redirectors
        while not self.stdout_redirector.buffer.empty():
            try:
                text = self.stdout_redirector.buffer.get_nowait()
                self.console.append_message(text.rstrip(), "info")
            except queue.Empty:
                break
        
        while not self.stderr_redirector.buffer.empty():
            try:
                text = self.stderr_redirector.buffer.get_nowait()
                self.console.append_message(f"ERROR: {text.rstrip()}", "error")
            except queue.Empty:
                break
    
    def on_nav_clicked(self, button):
        """Handle navigation button click"""
        module_id = self.nav_buttons.id(button)
        self.show_module(module_id)
    
    def show_module(self, module_id: int):
        """Show specific module interface"""
        self.current_module = module_id
        
        # Create new module widget
        module_widget = QWidget()
        module_layout = QVBoxLayout(module_widget)
        module_layout.setContentsMargins(0, 0, 0, 0)
        module_layout.setSpacing(24)
          # Create appropriate card based on module_id
        if module_id == 0:  # Audio Preprocessing
            card = self.create_preprocessing_card()
            self.preprocessing_card = card
        elif module_id == 1:  # Source Separation
            card = self.create_source_separation_card()
            self.source_separation_card = card
        elif module_id == 2:  # Speaker Separation
            card = self.create_speaker_separation_card()
            self.speaker_separation_card = card
        elif module_id == 3:  # Voice Matching
            card = self.create_voice_matching_card()
            self.voice_matching_card = card
        else:
            card = ModernCard("Êú™Áü•Ê®°Âùó")
        
        # Add card to layout
        module_layout.addWidget(card)
        module_layout.addStretch()
        
        # Clear existing content safely
        if self.module_container.widget():
            old_widget = self.module_container.takeWidget()
            if old_widget:
                old_widget.hide()
                QTimer.singleShot(100, old_widget.deleteLater)
        
        # Set the new widget
        self.module_container.setWidget(module_widget)
          
    def create_preprocessing_card(self):
        """Create audio preprocessing module card"""
        card = ModernCard("Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜ", "üéõÔ∏è")
        
        # File selection
        file_info = QLabel("ÈÄâÊã©Èü≥È¢ëÊñá‰ª∂ËøõË°åÈ¢ÑÂ§ÑÁêÜ")
        file_info.setStyleSheet("color: #6b7280; font-size: 14px;")
        card.content_area.addWidget(file_info)
        
        card.select_btn = card.add_button("üìÅ ÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", self.select_audio_file)
        card.process_btn = card.add_button("üéõÔ∏è ÂºÄÂßãÈ¢ÑÂ§ÑÁêÜ", self.process_preprocessing, primary=True)
        card.process_btn.setEnabled(False)
        
        # Connect result buttons
        card.view_results_btn.clicked.connect(lambda: self.view_preprocessing_results(card))
        card.open_folder_btn.clicked.connect(lambda: self.open_output_folder(card))
        
        # Store references
        card.selected_file = None
        card.file_info = file_info
        
        return card
          
    def create_source_separation_card(self):
        """Create source separation module card"""
        card = ModernCard("Èü≥Ê∫êÂàÜÁ¶ª", "üéº")
        
        file_info = QLabel("‰ΩøÁî® Demucs ÂàÜÁ¶ªÈü≥È¢ë‰∏∫‰∏çÂêåÈü≥ËΩ®")
        file_info.setStyleSheet("color: #6b7280; font-size: 14px;")
        card.content_area.addWidget(file_info)
        
        card.select_btn = card.add_button("üìÅ ÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", self.select_audio_file)
        card.process_btn = card.add_button("üéº ÂºÄÂßãÂàÜÁ¶ª", self.process_source_separation, primary=True)
        card.process_btn.setEnabled(False)
        
        # Connect result buttons
        card.view_results_btn.clicked.connect(lambda: self.view_source_separation_results(card))
        card.open_folder_btn.clicked.connect(lambda: self.open_output_folder(card))
        
        card.selected_file = None
        card.file_info = file_info
        
        return card
    
    def create_speaker_separation_card(self):
        """Create speaker separation module card"""
        card = ModernCard("ËØ¥ËØù‰∫∫ÂàÜÁ¶ª", "üë•")
        
        file_info = QLabel("‰ΩøÁî® Pyannote ËøõË°åËØ¥ËØù‰∫∫ÂàÜÁ¶ª")
        file_info.setStyleSheet("color: #6b7280; font-size: 14px;")
        card.content_area.addWidget(file_info)
        
        card.select_btn = card.add_button("üìÅ ÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", self.select_audio_file)
        card.process_btn = card.add_button("üë• ÂºÄÂßãÂàÜÁ¶ª", self.process_speaker_separation, primary=True)
        card.process_btn.setEnabled(False)
        
        # Connect result buttons
        card.view_results_btn.clicked.connect(lambda: self.view_speaker_separation_results(card))
        card.open_folder_btn.clicked.connect(lambda: self.open_output_folder(card))
        
        card.selected_file = None
        card.file_info = file_info
        
        return card
        
    def create_voice_matching_card(self):
        """Create voice matching module card"""
        card = ModernCard("‰∫∫Â£∞ÂåπÈÖç", "üéØ")
        
        # Reference audio
        ref_info = QLabel("ÂèÇËÄÉÈü≥È¢ëÔºöÊú™ÈÄâÊã©")
        ref_info.setStyleSheet("color: #6b7280; font-size: 14px;")
        card.content_area.addWidget(ref_info)
        
        card.select_ref_btn = card.add_button("üéµ ÈÄâÊã©ÂèÇËÄÉÈü≥È¢ë", self.select_reference_audio)
        
        # Candidate audios
        cand_info = QLabel("ÂæÖÂåπÈÖçÈü≥È¢ëÔºöÊú™ÈÄâÊã©")
        cand_info.setStyleSheet("color: #6b7280; font-size: 14px;")
        card.content_area.addWidget(cand_info)
        card.select_cand_btn = card.add_button("üé™ ÈÄâÊã©ÂæÖÂåπÈÖçÈü≥È¢ë", self.select_candidate_audio)
        card.process_btn = card.add_button("üéØ ÂºÄÂßãÂåπÈÖç", self.process_voice_matching, primary=True)
        card.process_btn.setEnabled(False)
        
        # Connect result buttons
        card.view_results_btn.clicked.connect(lambda: self.view_voice_matching_results(card))
        card.open_folder_btn.clicked.connect(lambda: self.open_output_folder(card))
        
        card.reference_file = None
        card.candidate_files = []
        card.ref_info = ref_info
        card.cand_info = cand_info
        
        return card
    
    def select_audio_file(self):
        """Select audio file for current module"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "ÈÄâÊã©Èü≥È¢ëÊñá‰ª∂",
            "",
            "Èü≥È¢ëÊñá‰ª∂ (*.wav *.mp3 *.flac *.ogg *.m4a);;ÊâÄÊúâÊñá‰ª∂ (*)"
        )
        
        if file_path:
            # Get current active card based on the sender button
            sender = self.sender()
            card = sender.parent()
            while card and not isinstance(card, ModernCard):
                card = card.parent()
                
            if card:
                card.selected_file = file_path
                if hasattr(card, 'file_info'):
                    card.file_info.setText(f"Â∑≤ÈÄâÊã©Ôºö{Path(file_path).name}")
                    card.file_info.setStyleSheet("color: #059669; font-size: 14px; font-weight: 500;")
                card.process_btn.setEnabled(True)
                
                self.console.append_message(f"Â∑≤ÈÄâÊã©Êñá‰ª∂Ôºö{Path(file_path).name}", "success")
    
    def select_reference_audio(self):
        """Select reference audio for voice matching"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "ÈÄâÊã©ÂèÇËÄÉÈü≥È¢ë",
            "",
            "Èü≥È¢ëÊñá‰ª∂ (*.wav *.mp3 *.flac *.ogg *.m4a);;ÊâÄÊúâÊñá‰ª∂ (*)"
        )
        
        if file_path:
            # Get current active card based on the sender button
            sender = self.sender()
            card = sender.parent()
            while card and not isinstance(card, ModernCard):
                card = card.parent()
                
            if card:
                card.reference_file = file_path
                if hasattr(card, 'ref_info'):
                    card.ref_info.setText(f"ÂèÇËÄÉÈü≥È¢ëÔºö{Path(file_path).name}")
                    card.ref_info.setStyleSheet("color: #059669; font-size: 14px; font-weight: 500;")
                self.check_voice_matching_ready(card)
    
    def select_candidate_audio(self):
        """Select candidate audio files for voice matching"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "ÈÄâÊã©ÂæÖÂåπÈÖçÈü≥È¢ëÊñá‰ª∂ÔºàÂèØÂ§öÈÄâÔºâ",
            "",
            "Èü≥È¢ëÊñá‰ª∂ (*.wav *.mp3 *.flac *.ogg *.m4a);;ÊâÄÊúâÊñá‰ª∂ (*)"
        )
        
        if files:
            # Get current active card based on the sender button
            sender = self.sender()
            card = sender.parent()
            while card and not isinstance(card, ModernCard):
                card = card.parent()
                
            if card:
                card.candidate_files = files
                
                file_names = [Path(f).name for f in files[:3]]
                display_text = ", ".join(file_names)
                if len(files) > 3:
                    display_text += f" Á≠â{len(files)}‰∏™Êñá‰ª∂"
                    
                if hasattr(card, 'cand_info'):
                    card.cand_info.setText(f"ÂæÖÂåπÈÖçÈü≥È¢ëÔºö{display_text}")
                    card.cand_info.setStyleSheet("color: #059669; font-size: 14px; font-weight: 500;")
                self.check_voice_matching_ready(card)    
    
    def reset_preprocessing_ui(self):
        """Reset preprocessing UI state"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.process_btn.setEnabled(True)
                card.status_label.setText("ÂáÜÂ§áÂ∞±Áª™")
                card.progress_bar.setVisible(False)
        except:
            pass
    def on_preprocessing_success(self, result, output_dir):
        """Handle successful preprocessing completion"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.processing_results = result
                card.output_dir = output_dir
                card.view_results_btn.setVisible(True)
                card.view_results_btn.setEnabled(True)
                card.open_folder_btn.setVisible(True)
                card.open_folder_btn.setEnabled(True)
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
                # Update visualization if available
                if result and isinstance(result, dict):
                    visualization_files = []
                    
                    # Look for visualization files in output directory
                    if output_dir:
                        viz_extensions = ['.png', '.jpg', '.jpeg', '.pdf']
                        for ext in viz_extensions:
                            viz_files = list(Path(output_dir).glob(f"*{ext}"))
                            visualization_files.extend([str(f) for f in viz_files])
                    
                    # Also check if result contains visualization paths
                    if 'visualization_path' in result:
                        visualization_files.append(result['visualization_path'])
                    elif 'visualizations' in result:
                        visualization_files.extend(result['visualizations'])
                    
                    if visualization_files:
                        self.update_visualization(visualization_files)
                        self.console.append_message(f"üìä Â∑≤Âä†ËΩΩ {len(visualization_files)} ‰∏™ÂèØËßÜÂåñÊñá‰ª∂", "success")
                
        except Exception as e:
            self.console.append_message(f"‚ùå ËÆæÁΩÆÁªìÊûúÊåâÈíÆÂ§±Ë¥•Ôºö{str(e)}", "error")
    def get_current_card(self):
        """Get the currently active processing card"""
        try:
            # Return the card of the currently active module
            if self.current_module == 0:  # Audio Preprocessing
                return self.preprocessing_card
            elif self.current_module == 1:  # Source Separation
                return self.source_separation_card
            elif self.current_module == 2:  # Speaker Separation
                return self.speaker_separation_card
            elif self.current_module == 3:  # Voice Matching
                return self.voice_matching_card
            else:
                return None
        except Exception as e:
            self.console.append_message(f"‚ùå Ëé∑ÂèñÂΩìÂâçÂç°ÁâáÂ§±Ë¥•Ôºö{str(e)}", "error")
            return None
    
    def update_progress(self, progress):
        """Update progress bar"""
        try:
            card = self.get_current_card()
            if card and hasattr(card, 'progress_bar'):
                card.progress_bar.setValue(progress)
        except Exception as e:
            self.console.append_message(f"‚ùå Êõ¥Êñ∞ËøõÂ∫¶Â§±Ë¥•Ôºö{str(e)}", "error")
    
    def handle_processing_complete(self, result, output_dir):
        """Handle processing completion"""
        try:
            self.console.append_message(f"‚úÖ Â§ÑÁêÜÂÆåÊàê!", "success")
            self.console.append_message(f"üìÅ ËæìÂá∫ÁõÆÂΩï: {output_dir}", "info")
            
            card = self.get_current_card()
            if card:
                card.processing_results = result
                card.output_dir = output_dir
                card.view_results_btn.setVisible(True)
                card.view_results_btn.setEnabled(True)
                card.open_folder_btn.setVisible(True)
                card.open_folder_btn.setEnabled(True)
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
        except Exception as e:
            self.console.append_message(f"‚ùå Â§ÑÁêÜÂÆåÊàêÂõûË∞ÉÂ§±Ë¥•Ôºö{str(e)}", "error")
    
    def handle_processing_error(self, error_msg):
        """Handle processing error"""
        try:
            self.console.append_message(f"‚ùå Â§ÑÁêÜÂ§±Ë¥•: {error_msg}", "error")
            
            card = self.get_current_card()
            if card:
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
        except Exception as e:
            self.console.append_message(f"‚ùå ÈîôËØØÂ§ÑÁêÜÂõûË∞ÉÂ§±Ë¥•Ôºö{str(e)}", "error")
    
    def check_voice_matching_ready(self, card):
        """Check if voice matching is ready to process"""
        try:
            if not hasattr(card, 'reference_file') or not hasattr(card, 'candidate_files'):
                return False, "‚ùå Âç°Áâá‰ø°ÊÅØÈîôËØØ"
                
            if not card.reference_file:
                return False, "‚ùå ËØ∑ÂÖàÈÄâÊã©ÂèÇËÄÉÈü≥È¢ë"
                
            if not card.candidate_files or len(card.candidate_files) == 0:
                return False, "‚ùå ËØ∑ÂÖàÈÄâÊã©ÂæÖÂåπÈÖçÈü≥È¢ë"
                
            # Validate files exist
            if not os.path.exists(card.reference_file):
                return False, "‚ùå ÂèÇËÄÉÈü≥È¢ëÊñá‰ª∂‰∏çÂ≠òÂú®"
                
            for candidate_file in card.candidate_files:
                if not os.path.exists(candidate_file):
                    return False, f"‚ùå ÂÄôÈÄâÈü≥È¢ëÊñá‰ª∂‰∏çÂ≠òÂú®: {Path(candidate_file).name}"
            
            # Enable process button if everything is ready
            if hasattr(card, 'process_btn'):
                card.process_btn.setEnabled(True)
                    
            return True, "‚úÖ ÂáÜÂ§áÂ∞±Áª™"
            
        except Exception as e:
            return False, f"‚ùå Ê£ÄÊü•Áä∂ÊÄÅÂ§±Ë¥•: {str(e)}"
    
    # ===== Audio Preprocessing Methods =====
    
    def process_preprocessing(self):
        """Process audio preprocessing"""
        try:
            print("üî• process_preprocessing Ë¢´Ë∞ÉÁî®‰∫Ü!")
            self.console.append_message("üî• ÂºÄÂßãÊâßË°åÈü≥È¢ëÈ¢ÑÂ§ÑÁêÜ...", "info")
              # Check if processors are initialized
            if not self.processors.get('preprocessor'):
                self.console.append_message("‚ùå Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑ÈáçÂêØÂ∫îÁî®", "error")
                return
            
            # Get current active card
            card = self.get_current_card()
                
            if not card or not hasattr(card, 'selected_file') or not card.selected_file:
                self.console.append_message("‚ùå ËØ∑ÂÖàÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", "error")
                return
                
            # Validate file exists
            if not os.path.exists(card.selected_file):
                self.console.append_message("‚ùå ÈÄâÊã©ÁöÑÊñá‰ª∂‰∏çÂ≠òÂú®", "error")
                return
                
            self.console.append_message(f"üìÅ Â§ÑÁêÜÊñá‰ª∂: {card.selected_file}", "info")
            
            # Store current card reference
            self.current_processing_card = card
            
            # Setup UI for processing
            card.process_btn.setEnabled(False)
            card.progress_bar.setVisible(True)
            card.progress_bar.setValue(0)
            card.view_results_btn.setVisible(False)
            card.open_folder_btn.setVisible(False)
            
            # Create processing thread
            self.processing_thread = ProcessingThread(
                'preprocessing',
                card.selected_file,
                self.processors
            )
            self.processing_thread.progress_update.connect(self.update_progress)
            self.processing_thread.process_complete.connect(self.handle_processing_complete)
            self.processing_thread.process_error.connect(self.handle_processing_error)
            self.processing_thread.start()
            
        except Exception as e:
            self.console.append_message(f"‚ùå Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜÂêØÂä®Â§±Ë¥•Ôºö{str(e)}", "error")
            print(f"‚ùå process_preprocessing ÂºÇÂ∏∏Ôºö{str(e)}")
            # Re-enable button on error
            card = self.get_current_card()
            if card:
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
    # ===== Source Separation Methods =====
    
    def process_source_separation(self):
        """Process source separation"""
        try:
            print("üî• process_source_separation Ë¢´Ë∞ÉÁî®‰∫Ü!")
            self.console.append_message("üî• ÂºÄÂßãÊâßË°åÈü≥Ê∫êÂàÜÁ¶ª...", "info")
            
            # Check if processors are initialized
            if not self.processors.get('source_separator'):
                self.console.append_message("‚ùå Èü≥Ê∫êÂàÜÁ¶ªÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑ÈáçÂêØÂ∫îÁî®", "error")
                return
            
            # Get current active card
            card = self.get_current_card()
                
            if not card or not hasattr(card, 'selected_file') or not card.selected_file:
                self.console.append_message("‚ùå ËØ∑ÂÖàÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", "error")
                return
                
            # Validate file exists
            if not os.path.exists(card.selected_file):
                self.console.append_message("‚ùå ÈÄâÊã©ÁöÑÊñá‰ª∂‰∏çÂ≠òÂú®", "error")
                return
                
            self.console.append_message(f"üìÅ Â§ÑÁêÜÊñá‰ª∂: {card.selected_file}", "info")
            
            # Store current card reference
            self.current_processing_card = card
            
            # Disable UI during processing
            card.process_btn.setEnabled(False)
            card.status_label.setText("Ê≠£Âú®Â§ÑÁêÜ...")
            card.progress_bar.setVisible(True)
            card.progress_bar.setValue(0)
            
            # Start processing in thread
            self.processing_thread = threading.Thread(
                target=self._process_source_separation_thread,
                args=(card.selected_file,)
            )
            self.processing_thread.start()
            
        except Exception as e:
            error_msg = f"‚ùå ÂêØÂä®Èü≥Ê∫êÂàÜÁ¶ªÂ§±Ë¥•: {str(e)}"
            self.console.append_message(error_msg, "error")
            import traceback
            traceback.print_exc()
    def _process_source_separation_thread(self, input_file):
        """Source separation thread"""
        try:
            print(f"üéº ÂºÄÂßãÈü≥Ê∫êÂàÜÁ¶ªÁ∫øÁ®ãÔºåËæìÂÖ•Êñá‰ª∂: {input_file}")
            QTimer.singleShot(100, lambda: self.update_processing_status("üéº ÂºÄÂßãÈü≥Ê∫êÂàÜÁ¶ª...", 10, "info"))
            
            # Check if source_separator is available
            if not self.processors.get('source_separator'):
                raise Exception("Èü≥Ê∫êÂàÜÁ¶ªÂô®Êú™ÂàùÂßãÂåñ")
                
            # Process with DemucsSourceSeparator
            QTimer.singleShot(500, lambda: self.update_processing_status("ü§ñ Âä†ËΩΩ Demucs Ê®°Âûã...", 30, "info"))
            
            # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
            output_dir = "output"
            os.makedirs(output_dir, exist_ok=True)
            print(f"üìÅ ËæìÂá∫ÁõÆÂΩï: {output_dir}")
            
            QTimer.singleShot(800, lambda: self.update_processing_status("üéµ ÂàÜÁ¶ªÈü≥ËΩ®‰∏≠...", 60, "info"))
            print("üîß Ë∞ÉÁî®Èü≥Ê∫êÂàÜÁ¶ªÂô®...")
            result = self.processors['source_separator'].separate_audio(
                input_path=input_file,
                output_dir=output_dir
            )
            print(f"‚úÖ Èü≥Ê∫êÂàÜÁ¶ªÂÆåÊàêÔºåÁªìÊûú: {result}")
            if result and result.get('separated_files'):
                track_count = len(result['separated_files'])
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚úÖ Èü≥Ê∫êÂàÜÁ¶ªÂÆåÊàêÔºÅÂàÜÁ¶ªÂá∫ {track_count} ‰∏™Èü≥ËΩ®", 100, "success"))
                
                # Store results and show result buttons
                QTimer.singleShot(200, lambda: self.on_source_separation_success(result, output_dir))
                
            else:
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚ùå Èü≥Ê∫êÂàÜÁ¶ªÂ§±Ë¥•ÔºöÁªìÊûú‰∏∫Á©∫", None, "error"))
                
        except Exception as e:
            error_msg = f"‚ùå Èü≥Ê∫êÂàÜÁ¶ªÂá∫ÈîôÔºö{str(e)}"
            print(error_msg)
            import traceback
            traceback.print_exc()
            QTimer.singleShot(100, lambda: self.update_processing_status(error_msg, None, "error"))
        finally:
            # Re-enable UI
            print("üîÑ ÈáçÁΩÆUIÁä∂ÊÄÅ...")
            QTimer.singleShot(300, lambda: self.reset_source_separation_ui())
    
    def reset_source_separation_ui(self):
        """Reset source separation UI state"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.process_btn.setEnabled(True)
                card.status_label.setText("ÂáÜÂ§áÂ∞±Áª™")
                card.progress_bar.setVisible(False)
        except:
            pass
    def on_source_separation_success(self, result, output_dir):
        """Handle successful source separation completion"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.processing_results = result
                card.output_dir = output_dir
                card.view_results_btn.setVisible(True)
                card.view_results_btn.setEnabled(True)
                card.open_folder_btn.setVisible(True)
                card.open_folder_btn.setEnabled(True)
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
                # Update visualization if available
                if result and isinstance(result, dict):
                    visualization_files = []
                    
                    # Look for visualization files in output directory
                    if output_dir:
                        viz_extensions = ['.png', '.jpg', '.jpeg', '.pdf']
                        for ext in viz_extensions:
                            viz_files = list(Path(output_dir).glob(f"**/*{ext}"))
                            visualization_files.extend([str(f) for f in viz_files])
                    
                    # Also check if result contains visualization paths
                    if 'visualization_path' in result:
                        visualization_files.append(result['visualization_path'])
                    elif 'visualizations' in result:
                        visualization_files.extend(result['visualizations'])
                    
                    if visualization_files:
                        self.update_visualization(visualization_files)
                        self.console.append_message(f"üìä Â∑≤Âä†ËΩΩ {len(visualization_files)} ‰∏™ÂèØËßÜÂåñÊñá‰ª∂", "success")
                
        except Exception as e:
            self.console.append_message(f"‚ùå ËÆæÁΩÆÁªìÊûúÊåâÈíÆÂ§±Ë¥•Ôºö{str(e)}", "error")
    # ===== Speaker Separation Methods =====
    
    def process_speaker_separation(self):
        """Process speaker separation"""
        try:
            print("üî• process_speaker_separation Ë¢´Ë∞ÉÁî®‰∫Ü!")
            self.console.append_message("üî• ÂºÄÂßãÊâßË°åËØ¥ËØù‰∫∫ÂàÜÁ¶ª...", "info")
            
            # Check if processors are initialized
            if not self.processors.get('speaker_separator'):
                self.console.append_message("‚ùå ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑ÈáçÂêØÂ∫îÁî®", "error")
                return
            
            # Get current active card
            card = self.get_current_card()
                
            if not card or not hasattr(card, 'selected_file') or not card.selected_file:
                self.console.append_message("‚ùå ËØ∑ÂÖàÈÄâÊã©Èü≥È¢ëÊñá‰ª∂", "error")
                return
                
            # Validate file exists
            if not os.path.exists(card.selected_file):
                self.console.append_message("‚ùå ÈÄâÊã©ÁöÑÊñá‰ª∂‰∏çÂ≠òÂú®", "error")
                return
            
            self.console.append_message(f"üìÅ Â§ÑÁêÜÊñá‰ª∂: {card.selected_file}", "info")
            
            # Store current card reference
            self.current_processing_card = card
            
            # Disable UI during processing
            card.process_btn.setEnabled(False)
            card.status_label.setText("Ê≠£Âú®Â§ÑÁêÜ...")
            card.progress_bar.setVisible(True)
            card.progress_bar.setValue(0)
            
            # Start processing in thread
            self.processing_thread = threading.Thread(
                target=self._process_speaker_separation_thread,
                args=(card.selected_file,)
            )
            self.processing_thread.start()
            
        except Exception as e:
            error_msg = f"‚ùå ÂêØÂä®ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂ§±Ë¥•: {str(e)}"
            self.console.append_message(error_msg, "error")
            import traceback
            traceback.print_exc()
        
    def _process_speaker_separation_thread(self, input_file):
        """Speaker separation thread"""
        try:
            QTimer.singleShot(100, lambda: self.update_processing_status("üë• ÂºÄÂßãËØ¥ËØù‰∫∫ÂàÜÁ¶ª...", 10, "info"))
            
            # Process with SpeakerSeparator
            QTimer.singleShot(500, lambda: self.update_processing_status("ü§ñ Âä†ËΩΩ Pyannote Ê®°Âûã...", 30, "info"))
            
            # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
            output_dir = "output"
            os.makedirs(output_dir, exist_ok=True)
            
            QTimer.singleShot(800, lambda: self.update_processing_status("üó£Ô∏è ËØÜÂà´ËØ¥ËØù‰∫∫...", 60, "info"))
            result = self.processors['speaker_separator'].separate_speakers(
                input_path=input_file,
                output_dir=output_dir
            )
            if result and result.get('separated_files'):
                speaker_count = len(result['separated_files'])
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚úÖ ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂÆåÊàêÔºÅËØÜÂà´Âá∫ {speaker_count} ‰∏™ËØ¥ËØù‰∫∫", 100, "success"))
                
                # Store results and show result buttons
                QTimer.singleShot(200, lambda: self.on_speaker_separation_success(result, output_dir))
                
            else:
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚ùå ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂ§±Ë¥•ÔºöÁªìÊûú‰∏∫Á©∫", None, "error"))
                
        except Exception as e:
            QTimer.singleShot(100, lambda: self.update_processing_status(f"‚ùå ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂá∫ÈîôÔºö{str(e)}", None, "error"))
        finally:
            # Re-enable UI
            QTimer.singleShot(300, lambda: self.reset_speaker_separation_ui())
              
              
    def reset_speaker_separation_ui(self):
        """Reset speaker separation UI state"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.process_btn.setEnabled(True)
                card.status_label.setText("ÂáÜÂ§áÂ∞±Áª™")
                card.progress_bar.setVisible(False)
        except:
            pass
    def on_speaker_separation_success(self, result, output_dir):
        """Handle successful speaker separation completion"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.processing_results = result
                card.output_dir = output_dir
                card.view_results_btn.setVisible(True)
                card.view_results_btn.setEnabled(True)
                card.open_folder_btn.setVisible(True)
                card.open_folder_btn.setEnabled(True)
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
                # Update visualization if available
                if result and isinstance(result, dict):
                    visualization_files = []
                    
                    # Look for visualization files in output directory
                    if output_dir:
                        viz_extensions = ['.png', '.jpg', '.jpeg', '.pdf']
                        for ext in viz_extensions:
                            viz_files = list(Path(output_dir).glob(f"**/*{ext}"))
                            visualization_files.extend([str(f) for f in viz_files])
                    
                    # Also check if result contains visualization paths
                    if 'visualization_path' in result:
                        visualization_files.append(result['visualization_path'])
                    elif 'visualizations' in result:
                        visualization_files.extend(result['visualizations'])
                    
                    if visualization_files:
                        self.update_visualization(visualization_files)
                        self.console.append_message(f"üìä Â∑≤Âä†ËΩΩ {len(visualization_files)} ‰∏™ÂèØËßÜÂåñÊñá‰ª∂", "success")
                
        except Exception as e:
            self.console.append_message(f"‚ùå ËÆæÁΩÆÁªìÊûúÊåâÈíÆÂ§±Ë¥•Ôºö{str(e)}", "error")
    # ===== Voice Matching Methods =====
    
    def process_voice_matching(self):
        """Process voice matching"""
        try:
            print("üî• process_voice_matching Ë¢´Ë∞ÉÁî®‰∫Ü!")
            self.console.append_message("üî• ÂºÄÂßãÊâßË°å‰∫∫Â£∞ÂåπÈÖç...", "info")
            
            # Check if processors are initialized
            if not self.processors.get('voice_matcher'):
                self.console.append_message("‚ùå ‰∫∫Â£∞ÂåπÈÖçÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑ÈáçÂêØÂ∫îÁî®", "error")
                return
            
            # Get current active card
            card = self.get_current_card()
                
            if not card or not hasattr(card, 'reference_file') or not hasattr(card, 'candidate_files'):
                self.console.append_message("‚ùå Âç°Áâá‰ø°ÊÅØÈîôËØØ", "error")
                return
                
            if not card.reference_file or not card.candidate_files:
                self.console.append_message("‚ùå ËØ∑ÂÖàÈÄâÊã©ÂèÇËÄÉÈü≥È¢ëÂíåÂæÖÂåπÈÖçÈü≥È¢ë", "error")
                return
                
            # Validate files exist
            if not os.path.exists(card.reference_file):
                self.console.append_message("‚ùå ÂèÇËÄÉÈü≥È¢ëÊñá‰ª∂‰∏çÂ≠òÂú®", "error")
                return
                
            for candidate_file in card.candidate_files:
                if not os.path.exists(candidate_file):
                    self.console.append_message(f"‚ùå ÂÄôÈÄâÈü≥È¢ëÊñá‰ª∂‰∏çÂ≠òÂú®: {Path(candidate_file).name}", "error")
                    return
                
            self.console.append_message(f"üìÅ ÂèÇËÄÉÈü≥È¢ë: {Path(card.reference_file).name}", "info")
            self.console.append_message(f"üìÅ ÂæÖÂåπÈÖçÈü≥È¢ë: {len(card.candidate_files)} ‰∏™Êñá‰ª∂", "info")
            
            # Store current card reference
            self.current_processing_card = card
            
            # Disable UI during processing
            card.process_btn.setEnabled(False)
            card.status_label.setText("Ê≠£Âú®Â§ÑÁêÜ...")
            card.progress_bar.setVisible(True)
            card.progress_bar.setValue(0)
            
            # Start processing in thread
            self.processing_thread = threading.Thread(
                target=self._process_voice_matching_thread,
                args=(card.reference_file, card.candidate_files)
            )
            self.processing_thread.start()
            
        except Exception as e:
            error_msg = f"‚ùå ÂêØÂä®‰∫∫Â£∞ÂåπÈÖçÂ§±Ë¥•: {str(e)}"
            print(error_msg)
            self.console.append_message(error_msg, "error")
            import traceback
            traceback.print_exc()
        
    def _process_voice_matching_thread(self, reference_file, candidate_files):
        """Voice matching thread"""
        try:
            QTimer.singleShot(100, lambda: self.update_processing_status("üéØ ÂºÄÂßã‰∫∫Â£∞ÂåπÈÖçÂàÜÊûê...", 10, "info"))
            
            # Process with VoiceMatcher
            QTimer.singleShot(500, lambda: self.update_processing_status("üî¨ ÊèêÂèñÈü≥È¢ëÁâπÂæÅ...", 30, "info"))
            
            # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
            output_dir = "output"
            os.makedirs(output_dir, exist_ok=True)
            
            QTimer.singleShot(800, lambda: self.update_processing_status("üéµ ËÆ°ÁÆóÁõ∏‰ººÂ∫¶...", 60, "info"))
            result = self.processors['voice_matcher'].match_voices(
                reference_path=reference_file,
                candidate_paths=candidate_files,
                output_dir=output_dir
            )
            if result and result.get('success'):
                best_name = result.get('best_match_name', 'Unknown')
                best_score = result.get('best_score', 0)
                if isinstance(best_score, (int, float)):
                    score_text = f"{best_score:.3f}"
                else:
                    score_text = str(best_score)
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚úÖ ‰∫∫Â£∞ÂåπÈÖçÂÆåÊàêÔºÅÊúÄ‰Ω≥ÂåπÈÖçÔºö{best_name} (ËØÑÂàÜ: {score_text})", 100, "success"))
                
                # Store results and show result buttons
                QTimer.singleShot(200, lambda: self.on_voice_matching_success(result, output_dir))
                
            else:
                QTimer.singleShot(100, lambda: self.update_processing_status(f"‚ùå ‰∫∫Â£∞ÂåπÈÖçÂ§±Ë¥•ÔºöÁªìÊûú‰∏∫Á©∫", None, "error"))
                
        except Exception as e:
            QTimer.singleShot(100, lambda: self.update_processing_status(f"‚ùå ‰∫∫Â£∞ÂåπÈÖçÂá∫ÈîôÔºö{str(e)}", None, "error"))
        finally:
            # Re-enable UI
            QTimer.singleShot(300, lambda: self.reset_voice_matching_ui())
    
    def reset_voice_matching_ui(self):
        """Reset voice matching UI state"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.process_btn.setEnabled(True)
                card.status_label.setText("ÂáÜÂ§áÂ∞±Áª™")
                card.progress_bar.setVisible(False)
        except:
            pass
    def on_voice_matching_success(self, result, output_dir):
        """Handle successful voice matching completion"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.processing_results = result
                card.output_dir = output_dir
                card.view_results_btn.setVisible(True)
                card.view_results_btn.setEnabled(True)
                card.open_folder_btn.setVisible(True)
                card.open_folder_btn.setEnabled(True)
                card.process_btn.setEnabled(True)
                card.progress_bar.setVisible(False)
                
                # Update visualization if available
                if result and isinstance(result, dict):
                    visualization_files = []
                    
                    # Look for visualization files in output directory
                    if output_dir:
                        viz_extensions = ['.png', '.jpg', '.jpeg', '.pdf']
                        for ext in viz_extensions:
                            viz_files = list(Path(output_dir).glob(f"**/*{ext}"))
                            visualization_files.extend([str(f) for f in viz_files])
                    
                    # Also check if result contains visualization paths
                    if 'visualization_path' in result:
                        visualization_files.append(result['visualization_path'])
                    elif 'visualizations' in result:
                        visualization_files.extend(result['visualizations'])
                    
                    if visualization_files:
                        self.update_visualization(visualization_files)
                        self.console.append_message(f"üìä Â∑≤Âä†ËΩΩ {len(visualization_files)} ‰∏™ÂèØËßÜÂåñÊñá‰ª∂", "success")
                
        except Exception as e:
            self.console.append_message(f"‚ùå ËÆæÁΩÆÁªìÊûúÊåâÈíÆÂ§±Ë¥•Ôºö{str(e)}", "error")
    
    def show_custom_dialog(self, title: str, content: str, dialog_type: str = "info"):
        """Show a custom dialog with proper styling
        
        Args:
            title: Dialog title
            content: Dialog content
            dialog_type: Type of dialog ('info', 'warning', 'error')
        """
        dialog = QDialog(self)
        dialog.setWindowTitle(title)
        dialog.setFixedSize(500, 350)
        
        # Icon mapping
        icons = {
            'info': 'üí°',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'success': '‚úÖ'
        }
        icon = icons.get(dialog_type, 'üí°')
        
        dialog.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
            }
            QLabel {
                color: #374151;
                font-size: 14px;
                margin: 4px 0;
            }
            QTextEdit {
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 12px;
                background-color: #f9fafb;
                color: #374151;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
                font-size: 13px;
            }
            QPushButton {
                background-color: #6366f1;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 24px;
                font-size: 14px;
                font-weight: 500;
            }
            QPushButton:hover {
                background-color: #5855eb;
            }
        """)
        
        layout = QVBoxLayout(dialog)
        layout.setSpacing(16)
        layout.setContentsMargins(24, 24, 24, 24)
        
        # Title
        title_label = QLabel(f"{icon} {title}")
        title_label.setStyleSheet("font-size: 18px; font-weight: 600; color: #1f2937; margin-bottom: 8px;")
        layout.addWidget(title_label)
        
        # Content
        content_edit = QTextEdit()
        content_edit.setPlainText(content)
        content_edit.setReadOnly(True)
        layout.addWidget(content_edit)
        
        # OK button
        ok_button = QPushButton("Á°ÆÂÆö")
        ok_button.clicked.connect(dialog.accept)
        
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(ok_button)
        layout.addLayout(button_layout)
        
        dialog.exec()
            
    # ===== Result Display Methods =====
    
    def view_preprocessing_results(self, card):
        """Display preprocessing results in detail dialog"""
        if not hasattr(card, 'processing_results') or not card.processing_results:
            QMessageBox.information(self, "ÊèêÁ§∫", "ÊöÇÊó†Â§ÑÁêÜÁªìÊûú")
            return
            
        result = card.processing_results
        
        # Create detailed results dialog
        dialog = QDialog(self)
        dialog.setWindowTitle("Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜÁªìÊûú")
        dialog.setFixedSize(600, 500)        
        dialog.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                font-family: 'SF Pro Display', 'Segoe UI', sans-serif;
            }
            QLabel {
                color: #374151;
                font-size: 14px;
                margin: 4px 0;
            }
            QTextEdit {
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 12px;
                background-color: #f9fafb;
                color: #374151;
                font-family: 'Monaco', 'Consolas', monospace;
                font-size: 13px;
            }
        """)
        
        layout = QVBoxLayout(dialog)
        layout.setSpacing(16)
        layout.setContentsMargins(24, 24, 24, 24)
        
        # Title
        title = QLabel("üéõÔ∏è Èü≥È¢ëÈ¢ÑÂ§ÑÁêÜÁªìÊûúËØ¶ÊÉÖ")
        title.setStyleSheet("font-size: 18px; font-weight: 600; color: #1f2937; margin-bottom: 8px;")
        layout.addWidget(title)
        
        # Results content
        results_text = QTextEdit()
        results_text.setReadOnly(True)
        
        # Build results display
        content = []
        content.append("=" * 50)
        content.append("üìä Â§ÑÁêÜÁªìÊûúÊëòË¶Å")
        content.append("=" * 50)
        
        if result.get('output_audio_path'):
            content.append(f"‚úÖ ËæìÂá∫Êñá‰ª∂: {Path(result['output_audio_path']).name}")
            
        content.append(f"\n‚è∞ Â§ÑÁêÜÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 50)
        
        results_text.setPlainText("\n".join(content))
        layout.addWidget(results_text)
        
        # Close button
        close_btn = QPushButton("ÂÖ≥Èó≠")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #6366f1;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: 500;
            }
            QPushButton:hover {
                background-color: #5b5bf6;
            }
        """)
        close_btn.clicked.connect(dialog.accept)
        
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_layout.addWidget(close_btn)
        layout.addLayout(btn_layout)
        
        dialog.exec()
    def view_source_separation_results(self, card):
        """Display source separation results"""
        if not hasattr(card, 'processing_results') or not card.processing_results:
            self.show_custom_dialog("ÊèêÁ§∫", "ÊöÇÊó†Â§ÑÁêÜÁªìÊûú", "info")
            return
            
        result = card.processing_results
        
        content = f"""üéº Èü≥Ê∫êÂàÜÁ¶ªÂ§ÑÁêÜÂÆåÊàêÔºÅ

üìÅ ËæìÂá∫ÁõÆÂΩï: {result.get('output_dir', 'N/A')}

üìä Â§ÑÁêÜÁªìÊûú:
‚Ä¢ ËæìÂÖ•Êñá‰ª∂: {Path(result.get('input_path', '')).name if result.get('input_path') else 'N/A'}
‚Ä¢ ÂàÜÁ¶ªÊ®°Âûã: {result.get('model_used', 'N/A')}

üéµ ÂàÜÁ¶ªÈü≥ËΩ®:"""

        if result.get('separated_files'):
            for stem, path in result['separated_files'].items():
                content += f"\n‚Ä¢ {stem.capitalize()}: {Path(path).name}"
        else:
            content += "\n‚Ä¢ ÊöÇÊó†ÂàÜÁ¶ªÊñá‰ª∂‰ø°ÊÅØ"
            
        content += f"\n\nüìÑ ËØ¶ÁªÜÊä•Âëä: {Path(result.get('report_path', '')).name if result.get('report_path') else 'N/A'}"
        
        self.show_custom_dialog("Èü≥Ê∫êÂàÜÁ¶ªÁªìÊûú", content, "success")
        
    def view_speaker_separation_results(self, card):
        """Display speaker separation results"""
        if not hasattr(card, 'processing_results') or not card.processing_results:
            self.show_custom_dialog("ÊèêÁ§∫", "ÊöÇÊó†Â§ÑÁêÜÁªìÊûú", "info")
            return
            
        result = card.processing_results
        
        content = f"""üë• ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÂ§ÑÁêÜÂÆåÊàêÔºÅ

üìÅ ËæìÂá∫ÁõÆÂΩï: {result.get('output_dir', 'N/A')}

üìä Â§ÑÁêÜÁªìÊûú:
‚Ä¢ ËæìÂÖ•Êñá‰ª∂: {Path(result.get('input_path', '')).name if result.get('input_path') else 'N/A'}
‚Ä¢ ËØÜÂà´ËØ¥ËØù‰∫∫Êï∞: {len(result.get('speakers', []))}

üó£Ô∏è ÂàÜÁ¶ªËØ¥ËØù‰∫∫:"""

        if result.get('separated_files'):
            for speaker, path in result['separated_files'].items():
                content += f"\n‚Ä¢ {speaker}: {Path(path).name}"
        else:
            content += "\n‚Ä¢ ÊöÇÊó†ÂàÜÁ¶ªÊñá‰ª∂‰ø°ÊÅØ"
            
        content += f"\n\nüìÑ Êó∂Èó¥ËΩ¥Êñá‰ª∂: {Path(result.get('diarization_file', '')).name if result.get('diarization_file') else 'N/A'}"
        content += f"\nüìÑ ËØ¶ÁªÜÊä•Âëä: {Path(result.get('report_path', '')).name if result.get('report_path') else 'N/A'}"
        
        self.show_custom_dialog("ËØ¥ËØù‰∫∫ÂàÜÁ¶ªÁªìÊûú", content, "success")
        
    def view_voice_matching_results(self, card):
        """Display voice matching results"""
        if not hasattr(card, 'processing_results') or not card.processing_results:
            self.show_custom_dialog("ÊèêÁ§∫", "ÊöÇÊó†Â§ÑÁêÜÁªìÊûú", "info")
            return
            
        result = card.processing_results
        
        content = f"""üéØ ‰∫∫Â£∞ÂåπÈÖçÂ§ÑÁêÜÂÆåÊàêÔºÅ

üìÅ ËæìÂá∫ÁõÆÂΩï: {result.get('output_dir', 'N/A')}

üìä ÂåπÈÖçÁªìÊûú:
‚Ä¢ ÂèÇËÄÉÈü≥È¢ë: {Path(result.get('reference_path', '')).name if result.get('reference_path') else 'N/A'}
‚Ä¢ ÂÄôÈÄâÈü≥È¢ëÊï∞Èáè: {len(result.get('candidate_paths', []))}"""

        best_match = result.get('best_match_name', 'N/A')
        best_score = result.get('best_score', 0)
        if isinstance(best_score, (int, float)):
            score_text = f"{best_score:.3f}"
        else:
            score_text = str(best_score)
            
        content += f"""

üèÜ ÊúÄ‰Ω≥ÂåπÈÖç:
‚Ä¢ Êñá‰ª∂Âêç: {best_match}
‚Ä¢ Áõ∏‰ººÂ∫¶ËØÑÂàÜ: {score_text}
‚Ä¢ ËæìÂá∫Êñá‰ª∂: {Path(result.get('best_match_output', '')).name if result.get('best_match_output') else 'N/A'}

üìÑ ËØ¶ÁªÜÊä•Âëä: {Path(result.get('report_path', '')).name if result.get('report_path') else 'N/A'}
üìä ÂèØËßÜÂåñÂõæË°®: {Path(result.get('visualization_path', '')).name if result.get('visualization_path') else 'N/A'}"""
        
        self.show_custom_dialog("‰∫∫Â£∞ÂåπÈÖçÁªìÊûú", content, "success")
    
    def open_output_folder(self, card):
        """Open output folder in file explorer"""
        if not hasattr(card, 'output_dir') or not card.output_dir:
            self.show_custom_dialog("ÊèêÁ§∫", "ÊöÇÊó†ËæìÂá∫ÁõÆÂΩï‰ø°ÊÅØ", "info")
            return
            
        output_dir = Path(card.output_dir)
        if not output_dir.exists():
            self.show_custom_dialog("Ë≠¶Âëä", f"ËæìÂá∫ÁõÆÂΩï‰∏çÂ≠òÂú®Ôºö{output_dir}", "warning")
            return
            
        try:
            # Windows
            if sys.platform == "win32":
                os.startfile(str(output_dir))
            # macOS
            elif sys.platform == "darwin":
                subprocess.run(["open", str(output_dir)])
            # Linux
            else:
                subprocess.run(["xdg-open", str(output_dir)])
                
            self.console.append_message(f"üìÅ Â∑≤ÊâìÂºÄËæìÂá∫Êñá‰ª∂Â§πÔºö{output_dir}", "success")
            
        except Exception as e:
            self.show_custom_dialog("ÈîôËØØ", f"Êó†Ê≥ïÊâìÂºÄÊñá‰ª∂Â§πÔºö{str(e)}", "error")
            self.console.append_message(f"‚ùå ÊâìÂºÄÊñá‰ª∂Â§πÂ§±Ë¥•Ôºö{str(e)}", "error")
            
    # ===== Utility Methods =====
    
    def update_processing_status(self, message, progress, level):
        """Update processing status and progress"""
        try:
            if hasattr(self, 'current_processing_card') and self.current_processing_card:
                card = self.current_processing_card
                card.status_label.setText(message)
                if progress is not None:
                    card.progress_bar.setValue(progress)
            
            self.console.append_message(message, level)
            
        except Exception as e:
            print(f"‚ùå Êõ¥Êñ∞Áä∂ÊÄÅÂ§±Ë¥•: {e}")
    
    def update_visualization(self, visualization_files):
        """Update visualization panel with images"""
        try:
            if not visualization_files:
                self.console.append_message("‚ö†Ô∏è Ê≤°ÊúâÂèØËßÜÂåñÊñá‰ª∂ÈúÄË¶ÅÂä†ËΩΩ", "warning")
                return
                
            self.console.append_message(f"üìä Ê≠£Âú®Âä†ËΩΩ {len(visualization_files)} ‰∏™ÂèØËßÜÂåñÊñá‰ª∂...", "info")
            
            # Ensure viz_panel exists and has content_layout
            if not hasattr(self, 'viz_panel') or not self.viz_panel:
                self.console.append_message("‚ùå ÂèØËßÜÂåñÈù¢ÊùøÊú™ÂàùÂßãÂåñ", "error")
                return
                
            if not hasattr(self.viz_panel, 'content_layout') or not self.viz_panel.content_layout:
                self.console.append_message("‚ùå ÂèØËßÜÂåñÈù¢ÊùøÂ∏ÉÂ±ÄÊú™ÂàùÂßãÂåñ", "error")
                return
                
            # Clear existing visualizations safely
            while self.viz_panel.content_layout.count():
                child = self.viz_panel.content_layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()
                        
            # Create matplotlib figure
            from matplotlib.figure import Figure
            from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
            fig = Figure(figsize=(12, 8), facecolor='white')
            canvas = FigureCanvas(fig)
            
            # Load and display visualizations
            valid_files = [f for f in visualization_files if os.path.exists(f) and f.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf'))]
            
            if not valid_files:
                self.console.append_message("‚ùå Ê≤°ÊúâÊâæÂà∞ÊúâÊïàÁöÑÂèØËßÜÂåñÊñá‰ª∂", "error")
                return
                
            if len(valid_files) == 1:
                # Single visualization
                img_path = valid_files[0]
                try:
                    import matplotlib.image as mpimg
                    img = mpimg.imread(img_path)
                    ax = fig.add_subplot(111)
                    ax.imshow(img)
                    ax.axis('off')
                    ax.set_title(Path(img_path).stem, fontsize=14, fontweight='bold')
                    self.console.append_message(f"‚úÖ Â∑≤Âä†ËΩΩÂèØËßÜÂåñ: {Path(img_path).name}", "success")
                except Exception as e:
                    self.console.append_message(f"‚ùå Âä†ËΩΩÂõæÁâáÂ§±Ë¥• {Path(img_path).name}: {e}", "error")
                    return
            else:
                # Multiple visualizations in subplots
                rows = (len(valid_files) + 1) // 2
                for i, img_path in enumerate(valid_files):
                    try:
                        import matplotlib.image as mpimg
                        img = mpimg.imread(img_path)
                        ax = fig.add_subplot(rows, 2, i+1)
                        ax.imshow(img)
                        ax.axis('off')
                        ax.set_title(Path(img_path).stem, fontsize=12, fontweight='bold')
                    except Exception as e:
                        self.console.append_message(f"‚ùå Âä†ËΩΩÂõæÁâáÂ§±Ë¥• {Path(img_path).name}: {e}", "error")
                        
            fig.tight_layout()
            canvas.draw()
            
            # Add canvas to layout
            self.viz_panel.content_layout.addWidget(canvas)
            
            # Expand visualization panel if collapsed
            if hasattr(self.viz_panel, 'is_collapsed') and self.viz_panel.is_collapsed:
                self.viz_panel.toggle_collapse()
                
            self.console.append_message("‚úÖ ÂèØËßÜÂåñÈù¢ÊùøÂ∑≤Êõ¥Êñ∞", "success")
            
        except Exception as e:
            self.console.append_message(f"‚ùå ÂèØËßÜÂåñÊõ¥Êñ∞Â§±Ë¥•Ôºö{str(e)}", "error")
            import traceback
            traceback.print_exc()
    
    def closeEvent(self, event):
        """Handle application close event"""
        # Clean up any running threads
        if hasattr(self, 'processing_thread') and self.processing_thread.isRunning():
            self.console.append_message("‚èπÔ∏è Ê≠£Âú®ÂÅúÊ≠¢Â§ÑÁêÜÁ∫øÁ®ã...", "warning")
            self.processing_thread.quit()
            self.processing_thread.wait(3000)  # Wait up to 3 seconds
            
        # Restore original stdout/stderr
        if hasattr(self, 'original_stdout'):
            sys.stdout = self.original_stdout
        if hasattr(self, 'original_stderr'):
            sys.stderr = self.original_stderr
            
        event.accept()


def handle_exception(exc_type, exc_value, exc_traceback):
    """Global exception handler"""
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
        
    print(f"‚ùå Êú™Â§ÑÁêÜÁöÑÂºÇÂ∏∏: {exc_type.__name__}: {exc_value}")
    import traceback
    traceback.print_exception(exc_type, exc_value, exc_traceback)


def main():
    """Main function"""
    # Set global exception handler
    sys.excepthook = handle_exception
    
    try:
        app = QApplication(sys.argv)
        
        # Set application properties
        app.setApplicationName("Voice Processing Suite")
        app.setApplicationVersion("2.0")
        app.setOrganizationName("Voice Processing Team")
        
        print("üöÄ ÂêØÂä®Áé∞‰ª£ÂåñVoice Processing Suite...")
        
        # Create and show main window
        print("üèóÔ∏è ÂàõÂª∫‰∏ªÁ™óÂè£...")
        window = ModernVoiceProcessingApp()
        
        print("üñºÔ∏è ÊòæÁ§∫Á™óÂè£...")
        window.show()
        
        print("‚úÖ Â∫îÁî®ÂêØÂä®ÊàêÂäüÔºÅ")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå Â∫îÁî®ÂêØÂä®Â§±Ë¥•: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
